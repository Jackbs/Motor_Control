C51 COMPILER V9.54   MOTOR                                                                 06/02/2016 19:11:52 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MOTOR
OBJECT MODULE PLACED IN .\Objects\Motor.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Motor.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE DEBUG PRINT(.\Listings\Motor
                    -.lst) TABS(2) OBJECT(.\Objects\Motor.obj)

line level    source

   1          /***************************************************************************/
   2          /*                                                                         */
   3          /*    A simple program to set port values and output them                  */
   4          /*                                                                         */
   5          /***************************************************************************/
   6          
   7          
   8          /***  Include Files  *******************************************************/
   9          
  10          
  11          #include "phys340libkeil.h"
  12          #include <t89c51ac3.h>
  13          #include <string.h>
  14          #include <stdio.h>
  15          
  16          
  17          int currenttime;
  18          int lasttime;
  19          int timedif;
  20          double lastRPM;
  21          double RPM;
  22          int samples = 6;
  23          double avgRPM[6];
  24          double avgRPMcopy[6];
  25          double PC,DC,IC;
  26          double sum;
  27          
  28          /***  Interrupt handeler  **********************************************/
  29          
  30          
  31          void MyIntHandler(void) interrupt 6
  32          {
  33   1      
  34   1        if(CCF1){ //check to make sure inturupt from module 2 was triggered
  35   2          currenttime = CCAP1H;
  36   2          currenttime = currenttime << 8;
  37   2          currenttime = currenttime + CCAP1L;
  38   2          if(currenttime>lasttime){
  39   3            timedif = currenttime-lasttime;
  40   3          }else{
  41   3            timedif = (currenttime+65536)-lasttime;
  42   3          }
  43   2          
  44   2          
  45   2          
  46   2          lasttime = currenttime;    
  47   2          CCF1 = 0; //clear the interrupt flag
  48   2        }
  49   1      }
  50          
  51          float Avg(){
  52   1        int i;
  53   1        double avg = 0;;
  54   1        for(i = 0;i<samples;i++){
C51 COMPILER V9.54   MOTOR                                                                 06/02/2016 19:11:52 PAGE 2   

  55   2          avg = avg+avgRPM[i];
  56   2        }
  57   1        return (float)(avg/(double)samples);
  58   1      }
  59          
  60          
  61          
  62          
  63          
  64          
  65          /**  Main Function  ********************************************************/
  66          void main()
  67          {
  68   1        initLCD();
  69   1        
  70   1        CCAPM0 = 0x42; //Enable compeare mode on module 0 and set to PWM [0100 0010]
  71   1        CCAPM1 = 0x21; //Enable capture funtion on module 1 and set CCF1 bit to generate inturupt ; [00100001]
  72   1        CMOD = 0x00; //[00000000]
  73   1        EA = 1;
  74   1        EC = 1;
  75   1        CR = 1; //turn the PCA counter CCon reg
  76   1        RPM = 0.0;
  77   1        
  78   1        /**  PID CONSTANTS **/  
  79   1        PC = 0.08;
  80   1        DC = 0.03;
  81   1        IC = 0.001;
  82   1        
  83   1        sum = 0;
  84   1        while (TRUE)
  85   1        { 
  86   2          int i;
  87   2          char outputText [31];
  88   2          float ActualRPM;
  89   2          int SetRPM;
  90   2          double difference;
  91   2          double olddifference;
  92   2          double gradient;
  93   2          
  94   2          int j = P2;
  95   2            
  96   2          lastRPM = (300000.0/timedif); //(double)((1000000.0/((double)))/200.0)*60;
  97   2          
  98   2          for(i = 0;i<(samples-1);i++){
  99   3            avgRPM[i] = avgRPM[i+1];
 100   3          }
 101   2          avgRPM[samples-1] = lastRPM;
 102   2          
 103   2          
 104   2          j = (255-j);
 105   2          SetRPM = P2;
 106   2          ActualRPM = Avg();
 107   2          
 108   2          difference = (double)((double)SetRPM-(double)ActualRPM);
 109   2          
 110   2          sum = sum+difference;
 111   2          
 112   2          gradient = difference-olddifference;
 113   2          
 114   2          olddifference = difference;
 115   2          
 116   2          //RPM = RPM + (PC*difference);
C51 COMPILER V9.54   MOTOR                                                                 06/02/2016 19:11:52 PAGE 3   

 117   2          RPM = RPM + (PC*difference)+(IC*sum)+(DC*gradient);
 118   2          
 119   2          if(RPM<0){
 120   3            RPM = 1;
 121   3          }
 122   2          if(RPM<0){
 123   3            RPM = 1;
 124   3          }
 125   2          if(SetRPM<15){ //Cannot Activate motor bellow this speed, so do not try
 126   3            RPM = 0;
 127   3          }
 128   2          CCAP0H = (255-(int)RPM); //SET PWM
 129   2          
 130   2          
 131   2          //sprintf(outputText, "[%d]R-A[%.1f]",SetRPM, ActualRPM);
 132   2          sprintf(outputText, "[%d]R-A[%.1f]D[%.1f]R[%.1f]",SetRPM, ActualRPM,(float)sum,(float)RPM);
 133   2          
 134   2          delaya(10000);
 135   2          
 136   2          clearLCD();
 137   2          writeLineLCD(outputText);
 138   2          
 139   2          
 140   2          
 141   2          
 142   2        } 
 143   1      }
 144          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1182    ----
   CONSTANT SIZE    =     28    ----
   XDATA SIZE       =     80      59
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
